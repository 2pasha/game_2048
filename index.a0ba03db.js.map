{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,CCEA,IAUI,EAVE,EAAS,SAAS,aAAa,CAAC,WAChC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAY,SAAS,gBAAgB,CAAC,cACtC,EAAY,SAAS,aAAa,CAAC,eAGrC,EAAQ,EACR,EAAQ,CAAA,EAER,EAAY,CACd,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CAGK,EAAO,SAAA,CAAb,EAGE,OAFA,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAmB,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,E,I,A,W,M,A,U,wI,IAEX,EAAM,GAAG,EACf,IAAK,YACH,EAAK,GACL,KAEF,KAAK,aACH,EAAM,GACN,KAEF,KAAK,YACH,EAAK,GACL,KAEF,KAAK,UACH,EAAG,GACH,KAEF,SACE,MACJ,CAEA,IAAK,I,EAkDD,EAlDK,EAAM,EAAG,EApCP,EAoCmB,IAC5B,IAAK,IAAI,EAAM,EAAG,EArCT,EAqCqB,IACxB,CAAY,CAAC,EAAI,CAAC,EAAI,GAAK,CAAS,CAAC,EAAI,CAAC,EAAI,GAChD,EAAY,EACZ,IACA,KAKF,GACF,EAAW,SAAS,CAAC,MAAM,CAAC,UA4E1B,MAIJ,IAzCI,EAAgB,CAAA,EAEpB,EAAa,OAAO,CAAC,SAAA,CAArB,EACE,EAAI,OAAO,CAAC,SAAC,CAAA,CAAM,CAAnB,EACM,IAAS,CAAG,CAAC,EAAQ,EAAE,EACzB,CAAA,EAAgB,CAAA,CADlB,CAGF,EAC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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar button = document.querySelector(\".button\");\nvar messageWin = document.querySelector(\".message-win\");\nvar messageLose = document.querySelector(\".message-lose\");\nvar messageStart = document.querySelector(\".message-start\");\nvar fieldRows = document.querySelectorAll(\".field-row\");\nvar gameScore = document.querySelector(\".game-score\");\nvar size = 4;\nvar score = 0;\nvar isWin = false;\nvar newGameField;\nvar gameField = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\n// eslint-disable-next-line no-shadow\nvar move = function(event) {\n    newGameField = _to_consumable_array(gameField);\n    switch(event.key){\n        case \"ArrowLeft\":\n            left(newGameField);\n            break;\n        case \"ArrowRight\":\n            right(newGameField);\n            break;\n        case \"ArrowDown\":\n            down(newGameField);\n            break;\n        case \"ArrowUp\":\n            up(newGameField);\n            break;\n        default:\n            return;\n    }\n    for(var row = 0; row < size; row++){\n        for(var col = 0; col < size; col++)if (newGameField[row][col] !== gameField[row][col]) {\n            gameField = newGameField;\n            addNumber();\n            render();\n        }\n    }\n    if (isWin) messageWin.classList.remove(\"hidden\");\n    if (!isPosibleToMove()) {\n        messageLose.classList.remove(\"hidden\");\n        document.removeEventListener(\"keydown\", move);\n    }\n};\nbutton.addEventListener(\"click\", function() {\n    document.addEventListener(\"keydown\", move);\n    if (button.classList.contains(\"start\")) {\n        button.classList.replace(\"start\", \"restart\");\n        button.innerText = \"Restart\";\n        messageStart.classList.add(\"hidden\");\n    } else {\n        isWin = false;\n        reset();\n    }\n    addNumber();\n    addNumber();\n    render();\n});\nfunction checkRows() {\n    var hasDuplicates = false;\n    newGameField.forEach(function(row) {\n        if (row.some(function(cell, index) {\n            return cell === 0 || cell === row[index + 1];\n        })) hasDuplicates = true;\n    });\n    return hasDuplicates;\n}\nfunction checkColumns() {\n    var hasDuplicates = false;\n    newGameField.forEach(function(row) {\n        row.forEach(function(cell, index) {\n            if (cell === row[index + 1]) hasDuplicates = true;\n        });\n    });\n    return hasDuplicates;\n}\nfunction reverseRows() {\n    newGameField.forEach(function(row) {\n        return row.reverse();\n    });\n}\nfunction transposeGameField() {\n    newGameField = newGameField[0].map(function(x, colIndex) {\n        return newGameField.map(function(row) {\n            return row[colIndex];\n        });\n    });\n}\nfunction findEmptyCell() {\n    var emptyCells = [];\n    gameField.forEach(function(row, rowIndex) {\n        row.forEach(function(cell, columnIndex) {\n            if (cell === 0) emptyCells.push([\n                rowIndex,\n                columnIndex\n            ]);\n        });\n    });\n    return emptyCells[Math.floor(Math.random() * emptyCells.length)];\n}\nfunction isPosibleToMove() {\n    if (checkRows()) return true;\n    transposeGameField();\n    return checkColumns();\n}\nvar addNumber = function() {\n    var _findEmptyCell = _sliced_to_array(findEmptyCell(), 2), randomX = _findEmptyCell[0], randomY = _findEmptyCell[1];\n    gameField[randomX][randomY] = Math.random() < 0.9 ? 2 : 4;\n};\nvar left = function() {\n    if (!checkRows) return;\n    newGameField = newGameField.map(function(row) {\n        var newRow = row.filter(function(cell) {\n            return cell !== 0;\n        });\n        newRow.forEach(function(cell, index) {\n            if (cell === newRow[index + 1]) {\n                newRow[index] *= 2;\n                newRow.splice(index + 1, 1);\n                score += newRow[index];\n                if (newRow[index] === 2048) isWin = true;\n            }\n        });\n        return newRow.concat(Array(size - newRow.length).fill(0));\n    });\n};\nvar right = function() {\n    if (!checkRows) return;\n    reverseRows();\n    left();\n    reverseRows();\n};\nvar down = function() {\n    transposeGameField();\n    right();\n    transposeGameField();\n};\nvar up = function() {\n    transposeGameField();\n    left();\n    transposeGameField();\n};\nvar render = function() {\n    gameField.forEach(function(row, rowIndex) {\n        row.forEach(function(cell, colIndex) {\n            var elem = fieldRows[rowIndex].children[colIndex];\n            if (cell === 0) {\n                elem.textContent = \"\";\n                elem.className = \"field-cell\";\n            } else {\n                elem.textContent = cell;\n                elem.className = \"field-cell field-cell--\".concat(cell);\n            }\n        });\n    });\n    gameScore.textContent = score;\n};\nvar reset = function() {\n    score = 0;\n    gameField = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    if (!messageLose.classList.contains(\"hidden\")) messageLose.classList.add(\"hidden\");\n    if (!messageWin.classList.contains(\"hidden\")) messageWin.classList.add(\"hidden\");\n};\n\n//# sourceMappingURL=index.a0ba03db.js.map\n","'use strict';\n\nconst button = document.querySelector('.button');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst messageStart = document.querySelector('.message-start');\nconst fieldRows = document.querySelectorAll('.field-row');\nconst gameScore = document.querySelector('.game-score');\n\nconst size = 4;\nlet score = 0;\nlet isWin = false;\nlet newGameField;\nlet gameField = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\n// eslint-disable-next-line no-shadow\nconst move = event => {\n  newGameField = [...gameField];\n\n  switch (event.key) {\n    case 'ArrowLeft':\n      left(newGameField);\n      break;\n\n    case 'ArrowRight':\n      right(newGameField);\n      break;\n\n    case 'ArrowDown':\n      down(newGameField);\n      break;\n\n    case 'ArrowUp':\n      up(newGameField);\n      break;\n\n    default:\n      return;\n  }\n\n  for (let row = 0; row < size; row++) {\n    for (let col = 0; col < size; col++) {\n      if (newGameField[row][col] !== gameField[row][col]) {\n        gameField = newGameField;\n        addNumber();\n        render();\n      }\n    }\n  }\n\n  if (isWin) {\n    messageWin.classList.remove('hidden');\n  }\n\n  if (!isPosibleToMove()) {\n    messageLose.classList.remove('hidden');\n    document.removeEventListener('keydown', move);\n  }\n};\n\nbutton.addEventListener('click', () => {\n  document.addEventListener('keydown', move);\n\n  if (button.classList.contains('start')) {\n    button.classList.replace('start', 'restart');\n    button.innerText = 'Restart';\n    messageStart.classList.add('hidden');\n  } else {\n    isWin = false;\n    reset();\n  }\n\n  addNumber();\n  addNumber();\n  render();\n});\n\nfunction checkRows() {\n  let hasDuplicates = false;\n\n  newGameField.forEach(row => {\n    if (row.some((cell, index) => cell === 0 || cell === row[index + 1])) {\n      hasDuplicates = true;\n    }\n  });\n\n  return hasDuplicates;\n}\n\nfunction checkColumns() {\n  let hasDuplicates = false;\n\n  newGameField.forEach(row => {\n    row.forEach((cell, index) => {\n      if (cell === row[index + 1]) {\n        hasDuplicates = true;\n      }\n    });\n  });\n\n  return hasDuplicates;\n}\n\nfunction reverseRows() {\n  newGameField.forEach(row => row.reverse());\n}\n\nfunction transposeGameField() {\n  newGameField = newGameField[0]\n    .map((x, colIndex) => newGameField.map(row => row[colIndex]));\n}\n\nfunction findEmptyCell() {\n  const emptyCells = [];\n\n  gameField.forEach((row, rowIndex) => {\n    row.forEach((cell, columnIndex) => {\n      if (cell === 0) {\n        emptyCells.push([rowIndex, columnIndex]);\n      }\n    });\n  });\n\n  return emptyCells[Math.floor(Math.random() * emptyCells.length)];\n}\n\nfunction isPosibleToMove() {\n  if (checkRows()) {\n    return true;\n  }\n\n  transposeGameField();\n\n  return checkColumns();\n}\n\nconst addNumber = () => {\n  const [randomX, randomY] = findEmptyCell();\n\n  gameField[randomX][randomY] = Math.random() < 0.9 ? 2 : 4;\n};\n\nconst left = () => {\n  if (!checkRows) {\n    return;\n  }\n\n  newGameField = newGameField.map(row => {\n    const newRow = row.filter(cell => cell !== 0);\n\n    newRow.forEach((cell, index) => {\n      if (cell === newRow[index + 1]) {\n        newRow[index] *= 2;\n        newRow.splice(index + 1, 1);\n        score += newRow[index];\n\n        if (newRow[index] === 2048) {\n          isWin = true;\n        }\n      }\n    });\n\n    return newRow.concat(Array(size - newRow.length).fill(0));\n  });\n};\n\nconst right = () => {\n  if (!checkRows) {\n    return;\n  }\n\n  reverseRows();\n  left();\n  reverseRows();\n};\n\nconst down = () => {\n  transposeGameField();\n  right();\n  transposeGameField();\n};\n\nconst up = () => {\n  transposeGameField();\n  left();\n  transposeGameField();\n};\n\nconst render = () => {\n  gameField.forEach((row, rowIndex) => {\n    row.forEach((cell, colIndex) => {\n      const elem = fieldRows[rowIndex].children[colIndex];\n\n      if (cell === 0) {\n        elem.textContent = '';\n        elem.className = 'field-cell';\n      } else {\n        elem.textContent = cell;\n        elem.className = `field-cell field-cell--${cell}`;\n      }\n    });\n  });\n\n  gameScore.textContent = score;\n};\n\nconst reset = () => {\n  score = 0;\n\n  gameField = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  if (!messageLose.classList.contains('hidden')) {\n    messageLose.classList.add('hidden');\n  }\n\n  if (!messageWin.classList.contains('hidden')) {\n    messageWin.classList.add('hidden');\n  }\n};\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","newGameField","button","document","querySelector","messageWin","messageLose","messageStart","fieldRows","querySelectorAll","gameScore","score","isWin","gameField","move","event","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","_non_iterable_spread","TypeError","key","left","right","down","up","hasDuplicates","row","col","addNumber","render","classList","remove","checkRows","transposeGameField","forEach","cell","index","removeEventListener","some","reverseRows","reverse","map","x","colIndex","addEventListener","contains","replace","innerText","add","reset","emptyCells","_findEmptyCell","rowIndex","columnIndex","push","_array_with_holes","Math","floor","random","_iterable_to_array_limit","_s","_e","_i","_arr","_n","_d","next","done","value","err","_non_iterable_rest","randomX","randomY","newRow","filter","splice","concat","size","fill","elem","children","textContent","className"],"version":3,"file":"index.a0ba03db.js.map"}